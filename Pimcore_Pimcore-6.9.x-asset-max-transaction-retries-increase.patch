--- a/models/Asset.php
+++ b/models/Asset.php
@@ -504,7 +504,7 @@ class Asset extends Element\AbstractElement
             // we wrap the save actions in a loop here, so that we can restart the database transactions in the case it fails
             // if a transaction fails it gets restarted $maxRetries times, then the exception is thrown out
             // this is especially useful to avoid problems with deadlocks in multi-threaded environments (forked workers, ...)
-            $maxRetries = 5;
+            $maxRetries = 150;
             for ($retries = 0; $retries < $maxRetries; $retries++) {
                 $this->beginTransaction();

@@ -558,7 +558,7 @@ class Asset extends Element\AbstractElement
                     // we try to start the transaction $maxRetries times again (deadlocks, ...)
                     if ($e instanceof DeadlockException && $retries < ($maxRetries - 1)) {
                         $run = $retries + 1;
-                        $waitTime = rand(1, 5) * 100000; // microseconds
+                        $waitTime = rand(5, 10) * 100000; // microseconds
                         Logger::warn('Unable to finish transaction (' . $run . ". run) because of the following reason '" . $e->getMessage() . "'. --> Retrying in " . $waitTime . ' microseconds ... (' . ($run + 1) . ' of ' . $maxRetries . ')');

                         usleep($waitTime); // wait specified time until we restart the transaction
